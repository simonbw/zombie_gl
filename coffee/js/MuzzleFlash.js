// Generated by CoffeeScript 1.7.1
(function() {
  var LIFESPAN, LIGHT_COLOR, LIGHT_INTENSITY, LIGHT_RADIUS,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  LIFESPAN = 3;

  LIGHT_RADIUS = 16;

  LIGHT_INTENSITY = 0.2;

  LIGHT_COLOR = 0xFFDDAA;

  window.MuzzleFlash = (function() {
    function MuzzleFlash(x, y, z, dx, dy, vx, vy) {
      var angle, geom, i, material, px, py, pz, r, theta;
      this.x = x;
      this.y = y;
      this.z = z;
      this.dx = dx;
      this.dy = dy;
      this.vx = vx;
      this.vy = vy;
      this.dispose = __bind(this.dispose, this);
      this.update = __bind(this.update, this);
      this.init = __bind(this.init, this);
      angle = Math.atan2(this.dy, this.dx);
      geom = new THREE.Geometry();
      i = 0;
      while (i < 50) {
        theta = Random.normal(0.8);
        r = Math.random() * Math.random() * 0.2;
        px = Math.cos(angle + theta) * r + Random.normal() * 0.02;
        py = Math.sin(angle + theta) * r + Random.normal() * 0.02;
        pz = 0;
        geom.vertices.push(new THREE.Vector3(px, py, pz));
        i++;
      }
      material = new THREE.ParticleSystemMaterial({
        color: 0xFFFFFF,
        size: 0.2,
        map: THREE.ImageUtils.loadTexture("resources/images/particle.png"),
        blending: THREE.AdditiveBlending,
        transparent: true
      });
      this.particles = new THREE.ParticleSystem(geom, material);
      this.particles.sortParticles = true;
      this.particles.position.set(this.x, this.y, this.z);
    }

    MuzzleFlash.prototype.init = function(game) {
      game.scene.add(this.particles);
      this.light = game.lightManager.getPointLight(this.x, this.y, this.z);
      this.light.intensity = LIGHT_INTENSITY;
      this.light.color = LIGHT_COLOR;
      this.light.distance = LIGHT_RADIUS;
      this.light.update();
      return this.lifespan = LIFESPAN;
    };

    MuzzleFlash.prototype.update = function(game) {
      this.lifespan--;
      if (this.lifespan <= 0) {
        return game.removeEntity(this);
      } else {
        this.light.intensity = LIGHT_INTENSITY * this.lifespan / LIFESPAN;
        this.light.position.x += this.vx;
        this.light.position.y += this.vy;
        this.light.update();
        this.particles.position.x += this.vx;
        return this.particles.position.y += this.vy;
      }
    };

    MuzzleFlash.prototype.dispose = function(game) {
      if (this.disposed) {
        console.log("removing muzzleFlash twice");
      }
      this.disposed = true;
      this.light.dispose();
      return game.scene.remove(this.particles);
    };

    return MuzzleFlash;

  })();

}).call(this);

//# sourceMappingURL=MuzzleFlash.map
