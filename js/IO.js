// Generated by CoffeeScript 1.7.1
(function() {
  var BUTTON_THRESHOLD, B_FLASHLIGHT, B_LTRIGGER, B_NEXT_GUN, B_RELOAD, B_RTRIGGER, K_DOWN, K_FLASHLIGHT, K_FULLSCREEN, K_GAMEPAD_TOGGLE, K_LEFT, K_NEXT_GUN, K_RELOAD, K_RESET, K_RIGHT, K_UP, K_ZOOM_IN, K_ZOOM_OUT, LOOK_THRESHOLD, MOVE_THRESHOLD,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MOVE_THRESHOLD = 0.15;

  LOOK_THRESHOLD = 0.2;

  BUTTON_THRESHOLD = 0.4;

  K_UP = 87;

  K_DOWN = 83;

  K_LEFT = 65;

  K_RIGHT = 68;

  K_FLASHLIGHT = 70;

  K_RELOAD = 82;

  K_NEXT_GUN = 81;

  K_ZOOM_IN = 90;

  K_ZOOM_OUT = 88;

  K_GAMEPAD_TOGGLE = 71;

  K_RESET = 191;

  K_FULLSCREEN = 190;

  B_FLASHLIGHT = 3;

  B_RELOAD = 2;

  B_NEXT_GUN = 1;

  B_LTRIGGER = 6;

  B_RTRIGGER = 7;

  window.IO = (function() {
    function IO(game) {
      this.update = __bind(this.update, this);
      this.moveX = 0;
      this.moveY = 0;
      this.lookDirection = 0;
      this.lookDistance = 1.0;
      this.flashlight = true;
      this.trigger = false;
      this.zoom = 0;
      this.triggerPressed = false;
      this.reloadPressed = false;
      this.nextGunPressed = false;
      this.gamepad = null;
      this.gamepadEnabled = false;
      this.keys = [];
      this.mouseButtons = [];
      this.mousePosition = {
        x: 0,
        y: 0
      };
      this.buttons = [];
      this.axes = [];
      this.buttonPressedCallbacks = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
      this.buttonReleasedCallbacks = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []];
      window.addEventListener("keydown", (function(_this) {
        return function(event) {
          var e;
          if (!_this.keys[event.keyCode]) {
            switch (event.keyCode) {
              case K_FLASHLIGHT:
                if (!_this.gamepad || !_this.gamepadEnabled) {
                  _this.flashlight = !_this.flashlight;
                }
                break;
              case K_GAMEPAD_TOGGLE:
                _this.gamepadEnabled = !_this.gamepadEnabled;
                break;
              case K_RELOAD:
                if (!_this.gamepad || !_this.gamepadEnabled) {
                  _this.reloadPressed = true;
                }
                break;
              case K_RESET:
                game.start();
                break;
              case K_FULLSCREEN:
                if (document.fullScreen || document.webkitIsFullScreen || document.mozfullScreen) {
                  if (document.cancelFullScreen) {
                    document.cancelFullScreen();
                  } else if (document.webkitCancelFullScreen) {
                    document.webkitCancelFullScreen();
                  } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                  }
                } else {
                  e = game.renderer.domElement;
                  if (e.requestFullScreen) {
                    e.requestFullScreen();
                  } else if (e.webkitRequestFullScreen) {
                    e.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
                  } else if (e.mozRequestFullScreen) {
                    e.mozRequestFullScreen();
                  }
                }
            }
          }
          return _this.keys[event.keyCode] = true;
        };
      })(this));
      window.addEventListener("keyup", (function(_this) {
        return function(event) {
          return _this.keys[event.keyCode] = false;
        };
      })(this));
      window.addEventListener("mousedown", (function(_this) {
        return function(event) {
          if (event.button = 1) {
            _this.triggerPressed = true;
          }
          return _this.mouseButtons[event.button] = true;
        };
      })(this));
      window.addEventListener("mouseup", (function(_this) {
        return function(event) {
          return _this.mouseButtons[event.button] = false;
        };
      })(this));
      window.addEventListener("mousemove", (function(_this) {
        return function(event) {
          _this.mousePosition.x = event.clientX;
          return _this.mousePosition.y = event.clientY;
        };
      })(this));
      this.buttonPressedCallbacks[B_FLASHLIGHT].push((function(_this) {
        return function() {
          return _this.flashlight = !_this.flashlight;
        };
      })(this));
      this.buttonPressedCallbacks[B_RTRIGGER].push((function(_this) {
        return function() {
          return _this.triggerPressed = true;
        };
      })(this));
      this.buttonPressedCallbacks[B_RELOAD].push((function(_this) {
        return function() {
          return _this.reloadPressed = true;
        };
      })(this));
      this.buttonPressedCallbacks[B_NEXT_GUN].push((function(_this) {
        return function() {
          return _this.nextGunPressed = true;
        };
      })(this));
    }

    IO.prototype.update = function() {
      var f, i, lastGamepad, lookX, lookY, _i, _j, _k, _len, _len1, _ref, _ref1;
      this.moveX = 0;
      this.moveY = 0;
      lastGamepad = this.gamepad;
      this.gamepad = navigator.webkitGetGamepads()[0];
      if (this.gamepad && !lastGamepad) {
        this.gamepadEnabled = true;
      }
      if (this.gamepadEnabled && this.gamepad) {
        $("body").css("cursor", "none");
        for (i = _i = 0; _i < 15; i = ++_i) {
          if ((this.gamepad.buttons[i] > BUTTON_THRESHOLD) && (this.buttons[i] < BUTTON_THRESHOLD)) {
            _ref = this.buttonPressedCallbacks[i];
            for (_j = 0, _len = _ref.length; _j < _len; _j++) {
              f = _ref[_j];
              f();
            }
          }
          if ((this.gamepad.buttons[i] < BUTTON_THRESHOLD) && (this.buttons[i] > BUTTON_THRESHOLD)) {
            _ref1 = this.buttonReleasedCallbacks[i];
            for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
              f = _ref1[_k];
              f();
            }
          }
          this.buttons[i] = this.gamepad.buttons[i];
        }
        this.moveX = Math.abs(this.gamepad.axes[0]) >= MOVE_THRESHOLD ? this.gamepad.axes[0] : 0;
        this.moveY = Math.abs(this.gamepad.axes[1]) >= MOVE_THRESHOLD ? -this.gamepad.axes[1] : 0;
        lookX = this.gamepad.axes[2];
        lookY = -this.gamepad.axes[3];
        this.trigger = this.gamepad.buttons[B_RTRIGGER] > BUTTON_THRESHOLD;
        this.lookDistance = Math.sqrt(lookX * lookX + lookY * lookY);
        if (this.lookDistance > LOOK_THRESHOLD) {
          return this.lookDirection = Math.atan2(lookY, lookX);
        }
      } else {
        $("body").css("cursor", "crosshair");
        if (this.keys[K_UP] && !this.keys[K_DOWN]) {
          this.moveY = 1.0;
        }
        if (this.keys[K_DOWN] && !this.keys[K_UP]) {
          this.moveY = -1.0;
        }
        if (this.keys[K_LEFT] && !this.keys[K_RIGHT]) {
          this.moveX = -1.0;
        }
        if (this.keys[K_RIGHT] && !this.keys[K_LEFT]) {
          this.moveX = 1.0;
        }
        this.trigger = !!this.mouseButtons[0];
        lookX = this.mousePosition.x - window.innerWidth / 2;
        lookY = -(this.mousePosition.y - window.innerHeight / 2);
        this.lookDistance = Math.sqrt(lookX * lookX + lookY * lookY);
        this.lookDirection = Math.atan2(lookY, lookX);
        if (this.keys[K_ZOOM_IN]) {
          this.zoom = Math.min(this.zoom + 0.08, 1.0);
        }
        if (this.keys[K_ZOOM_OUT]) {
          this.zoom = Math.max(this.zoom - 0.08, -1.0);
        }
        if (!this.keys[K_ZOOM_IN] && !this.keys[K_ZOOM_OUT]) {
          return this.zoom = 0.85 * this.zoom;
        }
      }
    };

    IO.prototype.update2 = function(game) {
      this.triggerPressed = false;
      this.reloadPressed = false;
      return this.nextGunPressed = false;
    };

    return IO;

  })();

}).call(this);

//# sourceMappingURL=IO.map
