// Generated by CoffeeScript 1.8.0
(function() {
  var POINT_LIGHTS, RequestedPointLight, SPOT_LIGHTS,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  POINT_LIGHTS = 7;

  SPOT_LIGHTS = 0;

  window.LightManager = (function() {
    function LightManager(game) {}

    LightManager.prototype.reset = function(game) {
      var i, l, _results;
      this.pointLights = [];
      this.pointLightRequests = [];
      i = 0;
      _results = [];
      while (i < POINT_LIGHTS) {
        i++;
        l = new THREE.PointLight(0xFFFFFF, 1.0, 256);
        this.pointLights.push(l);
        l.position.set(10, -10, 10);
        _results.push(game.scene.add(l));
      }
      return _results;
    };

    LightManager.prototype.update = function(game) {
      var cx, cy, i, j, l, _results;
      i = this.pointLightRequests.length - 1;
      while (i >= 0) {
        if (this.pointLightRequests[i].disposed) {
          this.pointLightRequests.splice(i, 1);
        }
        i--;
      }
      cx = game.camera.position.x;
      cy = game.camera.position.y;
      this.pointLightRequests.sort(function(a, b) {
        var distA, distB;
        distA = Math.pow(a.position.x - cx, 2) + Math.pow(a.position.y - cy, 2);
        distB = Math.pow(b.position.x - cx, 2) + Math.pow(b.position.y - cy, 2);
        return distA * a.priority / a.distance - distB * b.priority / b.distance;
      });
      i = 0;
      while ((i < POINT_LIGHTS) && (i < this.pointLightRequests.length)) {
        this.pointLightRequests[i].giveLight(this.pointLights[i]);
        i++;
      }
      j = i;
      while (i < POINT_LIGHTS) {
        l = this.pointLights[i];
        l.intensity = 0;
        l.distance = 1.0;
        i++;
      }
      _results = [];
      while (j < this.pointLightRequests.length) {
        this.pointLightRequests[j].removeLight();
        _results.push(j++);
      }
      return _results;
    };

    LightManager.prototype.getPointLight = function(x, y, z, intensity, distance, color) {
      var l;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (z == null) {
        z = 0;
      }
      if (intensity == null) {
        intensity = 1.0;
      }
      if (distance == null) {
        distance = 64;
      }
      if (color == null) {
        color = 0xFFFFFF;
      }
      l = new RequestedPointLight(x, y, z, intensity, distance, color);
      this.pointLightRequests.push(l);
      return l;
    };

    return LightManager;

  })();

  RequestedPointLight = (function() {
    function RequestedPointLight(x, y, z, intensity, distance, color, priority) {
      this.intensity = intensity;
      this.distance = distance;
      this.color = color;
      this.priority = priority != null ? priority : 1.0;
      this.dispose = __bind(this.dispose, this);
      this.removeLight = __bind(this.removeLight, this);
      this.update = __bind(this.update, this);
      this.giveLight = __bind(this.giveLight, this);
      this.disposed = false;
      this.enabled = true;
      this.position = new THREE.Vector3(x, y, z);
      this.light = null;
    }

    RequestedPointLight.prototype.giveLight = function(light) {
      this.light = light;
      return this.update();
    };

    RequestedPointLight.prototype.update = function() {
      if (this.light) {
        this.light.position.set(this.position.x, this.position.y, this.position.z);
        this.light.intensity = this.intensity;
        this.light.distance = this.distance;
        return this.light.color.setHex(this.color);
      }
    };

    RequestedPointLight.prototype.removeLight = function() {
      return this.light = null;
    };

    RequestedPointLight.prototype.dispose = function() {
      return this.disposed = true;
    };

    return RequestedPointLight;

  })();

}).call(this);

//# sourceMappingURL=LightManager.js.map
